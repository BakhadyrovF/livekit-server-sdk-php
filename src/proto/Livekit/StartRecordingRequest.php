<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: livekit_recording.proto

namespace Livekit;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>livekit.StartRecordingRequest</code>
 */
class StartRecordingRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.livekit.RecordingOptions options = 5;</code>
     */
    protected $options = null;
    protected $input;
    protected $output;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $url
     *     @type \Livekit\RecordingTemplate $template
     *     @type \Livekit\RtmpOutput $rtmp
     *     @type string $filepath
     *     @type \Livekit\RecordingOptions $options
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\LivekitRecording::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string url = 1;</code>
     * @return string
     */
    public function getUrl()
    {
        return $this->readOneof(1);
    }

    public function hasUrl()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>string url = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.livekit.RecordingTemplate template = 2;</code>
     * @return \Livekit\RecordingTemplate|null
     */
    public function getTemplate()
    {
        return $this->readOneof(2);
    }

    public function hasTemplate()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.livekit.RecordingTemplate template = 2;</code>
     * @param \Livekit\RecordingTemplate $var
     * @return $this
     */
    public function setTemplate($var)
    {
        GPBUtil::checkMessage($var, \Livekit\RecordingTemplate::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.livekit.RtmpOutput rtmp = 3;</code>
     * @return \Livekit\RtmpOutput|null
     */
    public function getRtmp()
    {
        return $this->readOneof(3);
    }

    public function hasRtmp()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.livekit.RtmpOutput rtmp = 3;</code>
     * @param \Livekit\RtmpOutput $var
     * @return $this
     */
    public function setRtmp($var)
    {
        GPBUtil::checkMessage($var, \Livekit\RtmpOutput::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>string filepath = 4;</code>
     * @return string
     */
    public function getFilepath()
    {
        return $this->readOneof(4);
    }

    public function hasFilepath()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>string filepath = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setFilepath($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.livekit.RecordingOptions options = 5;</code>
     * @return \Livekit\RecordingOptions|null
     */
    public function getOptions()
    {
        return $this->options;
    }

    public function hasOptions()
    {
        return isset($this->options);
    }

    public function clearOptions()
    {
        unset($this->options);
    }

    /**
     * Generated from protobuf field <code>.livekit.RecordingOptions options = 5;</code>
     * @param \Livekit\RecordingOptions $var
     * @return $this
     */
    public function setOptions($var)
    {
        GPBUtil::checkMessage($var, \Livekit\RecordingOptions::class);
        $this->options = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getInput()
    {
        return $this->whichOneof("input");
    }

    /**
     * @return string
     */
    public function getOutput()
    {
        return $this->whichOneof("output");
    }

}

